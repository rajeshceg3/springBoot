package com.restapi.crud;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Import; // Added
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.doNothing;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.httpBasic;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf; // Added
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.hamcrest.CoreMatchers.is;

@WebMvcTest(MovieController.class)
@Import(SecurityConfig.class) // Added
public class MovieControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private MovieService movieService;

    @Autowired
    private ObjectMapper objectMapper; // For converting objects to JSON

    // Test for getMovies: successful retrieval of all movies
    @Test
    public void givenMovies_whenGetMovies_thenReturnJsonArray() throws Exception {
        Movie movie1 = new Movie(); // Assuming Movie has a default constructor and setters
        movie1.setId(1L);
        movie1.setName("Movie 1");
        movie1.setDescription("Description 1");

        Movie movie2 = new Movie();
        movie2.setId(2L);
        movie2.setName("Movie 2");
        movie2.setDescription("Description 2");
        List<Movie> listOfMovies = Arrays.asList(movie1, movie2);

        given(movieService.getAllMovies()).willReturn(listOfMovies);

        ResultActions response = mockMvc.perform(get(ApiPaths.MOVIES_BASE)
                .with(httpBasic("user", "password"))); // Added authentication

        response.andExpect(status().isOk())
                .andExpect(jsonPath("$.size()", is(listOfMovies.size())))
                .andExpect(jsonPath("$[0].name", is(movie1.getName())))
                .andExpect(jsonPath("$[1].name", is(movie2.getName())));
    }

    // Test for getMovieById: successful retrieval of a movie by ID
    @Test
    public void givenMovieId_whenGetMovieById_thenReturnMovieObject() throws Exception {
        long movieId = 1L;
        Movie movie = new Movie();
        movie.setId(movieId);
        movie.setName("Test Movie");
        movie.setDescription("Test Description");

        given(movieService.getMovieById(movieId)).willReturn(Optional.of(movie));

        ResultActions response = mockMvc.perform(get(ApiPaths.MOVIES_BY_ID, movieId)
                .with(httpBasic("user", "password"))); // Added authentication

        response.andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is(movie.getName())))
                .andExpect(jsonPath("$.description", is(movie.getDescription())));
    }

    // Test for getMovieById: returning 404 when a movie is not found
    @Test
    public void givenInvalidMovieId_whenGetMovieById_thenReturn404() throws Exception {
        long movieId = 1L;
        given(movieService.getMovieById(movieId)).willReturn(Optional.empty());

        ResultActions response = mockMvc.perform(get(ApiPaths.MOVIES_BY_ID, movieId)
                .with(httpBasic("user", "password"))); // Added authentication

        response.andExpect(status().isNotFound());
    }

    // Test for createMovie: successful creation of a movie with valid data
    @Test
    public void givenValidMovieObject_whenCreateMovie_thenReturnSavedMovie() throws Exception {
        Movie movieToSave = new Movie();
        // movieToSave.setId(1L); // ID is usually generated by the database
        movieToSave.setName("New Movie");
        movieToSave.setDescription("New Description");

        Movie savedMovie = new Movie();
        savedMovie.setId(1L); // Assume DB generates an ID
        savedMovie.setName("New Movie");
        savedMovie.setDescription("New Description");

        given(movieService.createMovie(any(Movie.class))).willReturn(savedMovie);

        ResultActions response = mockMvc.perform(post(ApiPaths.MOVIES_BASE)
                .with(httpBasic("user", "password"))
                .with(csrf()) // Added CSRF token
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(movieToSave)));

        response.andExpect(status().isOk()) // Current controller returns OK for POST
                .andExpect(jsonPath("$.name", is(savedMovie.getName())))
                .andExpect(jsonPath("$.description", is(savedMovie.getDescription())));
    }

    // Test for createMovie: returning a bad request (400) when creating a movie with invalid data (e.g., blank name)
    @Test
    public void givenInvalidMovieObject_whenCreateMovie_thenReturn400() throws Exception {
        Movie movieToSave = new Movie();
        movieToSave.setName(""); // Invalid: blank name
        movieToSave.setDescription("Description for invalid movie");

        // No need to mock movieService.createMovie as validation should prevent it from being called

        ResultActions response = mockMvc.perform(post(ApiPaths.MOVIES_BASE)
                .with(httpBasic("user", "password"))
                .with(csrf()) // Added CSRF token
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(movieToSave)));

        response.andExpect(status().isBadRequest());
    }

    // Test for updateMovie: successful update of a movie with valid data
    @Test
    public void givenValidMovieObject_whenUpdateMovie_thenReturnUpdatedMovie() throws Exception {
        long movieId = 1L;
        Movie movieToUpdate = new Movie();
        movieToUpdate.setName("Updated Movie Name");
        movieToUpdate.setDescription("Updated Movie Description");

        Movie updatedMovie = new Movie();
        updatedMovie.setId(movieId);
        updatedMovie.setName("Updated Movie Name");
        updatedMovie.setDescription("Updated Movie Description");

        // Mock the movie.getId() call inside the controller's updateMovie method
        // and the service call
        given(movieService.updateMovie(any(Movie.class))).willReturn(updatedMovie);


        ResultActions response = mockMvc.perform(put(ApiPaths.MOVIES_BY_ID, movieId)
                .with(httpBasic("user", "password"))
                .with(csrf()) // Added CSRF token
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(movieToUpdate)));

        response.andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is(updatedMovie.getName())))
                .andExpect(jsonPath("$.description", is(updatedMovie.getDescription())));
    }

    // Test for updateMovie: returning a bad request (400) when updating a movie with invalid data
    @Test
    public void givenInvalidMovieObject_whenUpdateMovie_thenReturn400() throws Exception {
        long movieId = 1L;
        Movie movieToUpdate = new Movie();
        movieToUpdate.setName(""); // Invalid: blank name
        movieToUpdate.setDescription("Description for invalid update");

        ResultActions response = mockMvc.perform(put(ApiPaths.MOVIES_BY_ID, movieId)
                .with(httpBasic("user", "password"))
                .with(csrf()) // Added CSRF token
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(movieToUpdate)));

        response.andExpect(status().isBadRequest());
    }

    // Test for deleteMovie: successful deletion of a movie
    @Test
    public void givenMovieId_whenDeleteMovie_thenReturn200() throws Exception {
        long movieId = 1L;
        doNothing().when(movieService).deleteMovie(movieId);

        ResultActions response = mockMvc.perform(delete(ApiPaths.MOVIES_BY_ID, movieId)
                .with(httpBasic("user", "password"))
                .with(csrf())); // Added CSRF token

        response.andExpect(status().isOk());
    }
}
